1. You are given a number n, representing the number of days.
2. You are given n numbers, where ith number represents price of stock on ith day.
3. You are required to print the maximum profit you can make if you are allowed two transactions at-most.
Note - There can be no overlapping transaction. One transaction needs to be closed (a buy followed by a sell) before opening another transaction (another buy).
Input Format
A number n
.. n more elements
Output Format
A number representing the maximum profit you can make if you are allowed a single transaction.

Constraints
0 <= n <= 20
0 <= n1, n2, .. <= 10
Sample Input
9
11
6
7
19
4
1
6
18
4
Sample Output
30

Program

import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int[] stock = new int[n];
        for(int i = 0; i < n; i++){
            stock[i] = scn.nextInt();
        }
        
        int msf = Integer.MAX_VALUE;
        int[] mist = new int[n];
        mist[0] = 0;
        msf = stock[0];
        for(int i = 1; i < n; i++){
            if(stock[i] < msf){
                msf = stock[i];
            }
            int mism = stock[i] - msf; 
            if(mist[i - 1] > mism){
                mist[i] = mist[i - 1];
            }
            else{
                mist[i] = mism;
            }
        }
        
        int mbf = Integer.MAX_VALUE;
        int[] mibt = new int[n];
        mibt[0] = 0;
        mbf = stock[n - 1];
        for(int i = n - 2; i >= 0; i--){
            if(stock[i] > mbf){
                mbf = stock[i];
            }
            int mibm = mbf - stock[i];
            if(mibm < mibt[i + 1]){
                mibt[i] = mibt[i + 1]; 
            }
            else{
                mibt[i] = mibm;
            }
        }
        
        int sum = Integer.MIN_VALUE;
        for(int i = 0; i < n; i++){
            int sums = mibt[i] + mist[i];
            if(sums > sum){
                sum = sums;
            }
        }
        System.out.println(sum);
    }

}