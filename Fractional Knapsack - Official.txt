1. You are given a number n, representing the count of items.
2. You are given n numbers, representing the values of n items.
3. You are given n numbers, representing the weights of n items.
3. You are given a number "cap", which is the capacity of a bag you've.
4. You are required to calculate and print the maximum value that can be created in the bag without overflowing it's capacity.
Note1 -> Items can be added to the bag even partially. But you are not allowed to put same items again and again to the bag.
Input Format
A number n
v1 v2 .. n number of elements
w1 w2 .. n number of elements
A number cap
Output Format
A decimal number representing the maximum value that can be created in the bag without overflowing it's capacity

Constraints
1 <= n <= 20
0 <= v1, v2, .. n elements <= 50
0 < w1, w2, .. n elements <= 10
0 < cap <= 10
Sample Input
10
33 14 50 9 8 11 6 40 2 15 
7 2 5 9 3 2 1 10 3 3 
5
Sample Output
50.0

Program

import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        
        Scanner sc=new Scanner(System.in); 
        int object,m;
        object=sc.nextInt();
        int weight[]=new int[object]; 
        int profit[]=new int[object]; 
        for(int i=0;i<object;i++) {
            profit[i]=sc.nextInt();
        }
        for(int i=0;i<object;i++)   {
            weight[i]=sc.nextInt();
        }

        m=sc.nextInt();
        float p_w[]=new float[object];
        for(int i=0;i<object;i++){
            p_w[i]=(float)profit[i]/(float)weight[i];
        }
        for(int i=0;i<object-1;i++){
            for(int j=i+1;j<object;j++){
                if(p_w[i]<p_w[j]){
                    float temp=p_w[j];
                    p_w[j]=p_w[i];
                    p_w[i]=temp;
                    int temp1=profit[j];
                    profit[j]=profit[i];
                    profit[i]=temp1;
                    int temp2=weight[j];
                    weight[j]=weight[i];
                    weight[i]=temp2;
                }
            }
        }

        int k=0;
        float sum=0;
        while(m>0){
            if(weight[k]<m){
                sum+=1*profit[k];
                m=m-weight[k];
            }
            else{
                float x4=m*profit[k];
                float x5=weight[k];
                float x6=x4/x5;
                sum=sum+x6;
                m=0;
            }
            k++;
        }
        System.out.println(sum);
    }
}
